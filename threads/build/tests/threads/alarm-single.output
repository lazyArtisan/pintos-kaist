Kernel command line: -q run alarm-single
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  110,796,800 loops/s.
Boot complete.
Executing 'alarm-single':
(alarm-single) begin
(alarm-single) Creating 5 threads to sleep 1 times each.
(alarm-single) Thread 0 sleeps 10 ticks each time,
(alarm-single) thread 1 sleeps 20 ticks each time, and so on.
(alarm-single) If successful, product of iteration count and
(alarm-single) sleep duration will appear in nondescending order.
Interrupt 0x0e (#PF Page-Fault Exception) at rip=80042137f7
 cr2=0000001f04000e88 error=               2
rax 0000001f04000e80 rbx 0000000000204400 rcx 0000000000000008 rdx 0000008004000028
rsp 0000008004000e00 rbp 0000008004000e10 rsi 0000008004000028 rdi 0000008004000e60
rip 00000080042137f7 r8 0000008004000d88  r9 0000008004210647 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200206
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213243 0x8004208832 0x8004208be4 0x8004213a34 0x800420cf26 0x8004216bcc 0x8004216891 0x800421667f 0x8004206636 0x8004206783 0x8004206120.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 27 ticks
Thread: 0 idle ticks, 27 kernel ticks, 0 user ticks
Console: 1