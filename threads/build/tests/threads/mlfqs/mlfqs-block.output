Kernel command line: -q -mlfqs run mlfqs-block
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  111,206,400 loops/s.
Boot complete.
Executing 'mlfqs-block':
(mlfqs-block) begin
(mlfqs-block) Main thread acquiring lock.
(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
Interrupt 0x0e (#PF Page-Fault Exception) at rip=80042137f7
 cr2=0000001f042166fb error=               2
rax 0000001f042166f3 rbx 0000000000204400 rcx 0000000000000004 rdx 0000008004000028
rsp 0000008004000e70 rbp 0000008004000e80 rsi 0000008004000028 rdi 0000008004000ed0
rip 00000080042137f7 r8 0000008004000e0c  r9 000000800421652b r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200206
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213243 0x8004208832 0x8004208be4 0x8004213a34 0x800420cf26 0x800421a788 0x800421667f 0x8004206636 0x8004206783 0x8004206120.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 26 ticks
Thread: 0 idle ticks, 26 kernel ticks, 0 user ticks
Console: 1